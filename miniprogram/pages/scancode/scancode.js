"use strict";
Page({
    data: {
        bookslist: []
    },
    scan: function () {
        var _this = this;
        wx.scanCode({
            success: function (res) {
                console.log(res);
                console.log("res");
                _this.getUserById();
            }
        });
    },
    jumptoqrcode: function (e) {
        console.log(e);
        var id = e.target.dataset.id;
        var url = "../qrcode/qrcode?id=" + id;
        wx.navigateTo({
            url: url
        });
    },
    onLoad: function () {
        wx.cloud.init();
    },
    onReady: function () {
        this.getAllBooks();
        wx.cloud
            .callFunction({
            name: "updateBookById"
        })
            .then(function (res) {
            console.log(res);
        });
    },
    getAllBooks: function () {
        var _this = this;
        wx.cloud
            .callFunction({
            name: "getBooks"
        })
            .then(function (res) {
            console.log(res);
            var result = res.result || {};
            if (typeof result == "object") {
                var rd = result.data || {};
                if (rd) {
                    var data = rd.data || {};
                    _this.setData({
                        bookslist: data
                    });
                }
            }
        });
    },
    updateBookById: function (bid) {
        wx.cloud
            .callFunction({
            name: "updateBookById",
            data: {
                bid: bid
            }
        });
    },
    getUserById: function () {
        var user = {};
        wx.cloud
            .callFunction({
            name: "UserById",
        }).then(function (res) {
            console.log('get');
            console.log(res);
            var result = res.result || {};
            if (typeof result == "object") {
                var rd = result.data || {};
                if (rd) {
                    var data = rd.data || {};
                    user = data[0];
                }
            }
        });
        if (Object.keys(user).length == 0) {
            this.createUser();
        }
    },
    createUser: function () {
        wx.cloud
            .callFunction({
            name: "createUser",
        }).then(function (res) {
            console.log('create');
            console.log(res);
        });
    }
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2NhbmNvZGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJzY2FuY29kZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBRUEsSUFBSSxDQUFDO0lBQ0QsSUFBSSxFQUFFO1FBQ0YsU0FBUyxFQUFFLEVBQUU7S0FDaEI7SUFDRCxJQUFJO1FBQUosaUJBUUM7UUFQRyxFQUFFLENBQUMsUUFBUSxDQUFDO1lBQ1IsT0FBTyxFQUFFLFVBQUEsR0FBRztnQkFDUixPQUFPLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO2dCQUNqQixPQUFPLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFBO2dCQUNsQixLQUFJLENBQUMsV0FBVyxFQUFFLENBQUM7WUFDdkIsQ0FBQztTQUNKLENBQUMsQ0FBQztJQUNQLENBQUM7SUFFRCxZQUFZLEVBQVosVUFBYSxDQUFVO1FBQ25CLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDVCxJQUFBLHdCQUFFLENBQXNCO1FBRTlCLElBQUksR0FBRyxHQUFHLHNCQUFzQixHQUFHLEVBQUUsQ0FBQztRQUN0QyxFQUFFLENBQUMsVUFBVSxDQUFDO1lBQ1YsR0FBRyxLQUFBO1NBQ04sQ0FBQyxDQUFDO0lBQ1AsQ0FBQztJQUNELE1BQU07UUFDRixFQUFFLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ3BCLENBQUM7SUFDRCxPQUFPLEVBQVA7UUFDSSxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUE7UUFDbEIsRUFBRSxDQUFDLEtBQUs7YUFDSCxZQUFZLENBQUM7WUFDVixJQUFJLEVBQUUsZ0JBQWdCO1NBQ3pCLENBQUM7YUFDRCxJQUFJLENBQUMsVUFBQyxHQUFRO1lBQ1gsT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNyQixDQUFDLENBQUMsQ0FBQztJQUNYLENBQUM7SUFFRCxXQUFXLEVBQVg7UUFBQSxpQkFrQkM7UUFqQkcsRUFBRSxDQUFDLEtBQUs7YUFDSCxZQUFZLENBQUM7WUFDVixJQUFJLEVBQUUsVUFBVTtTQUNuQixDQUFDO2FBQ0QsSUFBSSxDQUFDLFVBQUMsR0FBUTtZQUNYLE9BQU8sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDakIsSUFBSSxNQUFNLEdBQUcsR0FBRyxDQUFDLE1BQU0sSUFBSSxFQUFFLENBQUM7WUFDOUIsSUFBSSxPQUFPLE1BQU0sSUFBSSxRQUFRLEVBQUU7Z0JBQzNCLElBQUksRUFBRSxHQUFHLE1BQU0sQ0FBQyxJQUFJLElBQUksRUFBRSxDQUFDO2dCQUMzQixJQUFJLEVBQUUsRUFBRTtvQkFDSixJQUFJLElBQUksR0FBRyxFQUFFLENBQUMsSUFBSSxJQUFJLEVBQUUsQ0FBQztvQkFDekIsS0FBSSxDQUFDLE9BQU8sQ0FBQzt3QkFDVCxTQUFTLEVBQUUsSUFBSTtxQkFDbEIsQ0FBQyxDQUFDO2lCQUNOO2FBQ0o7UUFDTCxDQUFDLENBQUMsQ0FBQztJQUNYLENBQUM7SUFDRCxjQUFjLEVBQWQsVUFBZSxHQUFVO1FBQ3JCLEVBQUUsQ0FBQyxLQUFLO2FBQ0gsWUFBWSxDQUFDO1lBQ1YsSUFBSSxFQUFFLGdCQUFnQjtZQUN0QixJQUFJLEVBQUU7Z0JBQ0YsR0FBRyxLQUFBO2FBQ047U0FDSixDQUFDLENBQUE7SUFDVixDQUFDO0lBQ0QsV0FBVyxFQUFYO1FBQ0ksSUFBSSxJQUFJLEdBQUcsRUFBRSxDQUFDO1FBQ2QsRUFBRSxDQUFDLEtBQUs7YUFDSCxZQUFZLENBQUM7WUFDVixJQUFJLEVBQUUsVUFBVTtTQUNuQixDQUFDLENBQUMsSUFBSSxDQUFDLFVBQUMsR0FBUTtZQUNiLE9BQU8sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUE7WUFDbEIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUNqQixJQUFJLE1BQU0sR0FBRyxHQUFHLENBQUMsTUFBTSxJQUFJLEVBQUUsQ0FBQztZQUM5QixJQUFJLE9BQU8sTUFBTSxJQUFJLFFBQVEsRUFBRTtnQkFDM0IsSUFBSSxFQUFFLEdBQUcsTUFBTSxDQUFDLElBQUksSUFBSSxFQUFFLENBQUM7Z0JBQzNCLElBQUksRUFBRSxFQUFFO29CQUNKLElBQUksSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLElBQUksRUFBRSxDQUFDO29CQUN6QixJQUFJLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFBO2lCQUNqQjthQUNKO1FBQ0wsQ0FBQyxDQUFDLENBQUM7UUFDUCxJQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsTUFBTSxJQUFJLENBQUMsRUFBRTtZQUMvQixJQUFJLENBQUMsVUFBVSxFQUFFLENBQUM7U0FDckI7SUFDTCxDQUFDO0lBQ0QsVUFBVTtRQUNOLEVBQUUsQ0FBQyxLQUFLO2FBQ0gsWUFBWSxDQUFDO1lBQ1YsSUFBSSxFQUFFLFlBQVk7U0FDckIsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFBLEdBQUc7WUFDUCxPQUFPLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFBO1lBQ3JCLE9BQU8sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUE7UUFBQSxDQUFDLENBQUMsQ0FBQTtJQUM5QixDQUFDO0NBQ0osQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gY29uc3QgZGIgPSB3eC5jbG91ZC5kYXRhYmFzZSgpXHJcbi8vIGNvbnN0IGE9Z2V0XHJcblBhZ2Uoe1xyXG4gICAgZGF0YToge1xyXG4gICAgICAgIGJvb2tzbGlzdDogW11cclxuICAgIH0sXHJcbiAgICBzY2FuKCkge1xyXG4gICAgICAgIHd4LnNjYW5Db2RlKHtcclxuICAgICAgICAgICAgc3VjY2VzczogcmVzID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKHJlcyk7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcInJlc1wiKVxyXG4gICAgICAgICAgICAgICAgdGhpcy5nZXRVc2VyQnlJZCgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9LFxyXG4gICAgLy8gICDot7Povazoh7Plr7nlupTkuoznu7TnoIFcclxuICAgIGp1bXB0b3FyY29kZShlOiBteWV2ZW50KSB7XHJcbiAgICAgICAgY29uc29sZS5sb2coZSk7XHJcbiAgICAgICAgbGV0IHsgaWQgfSA9IGUudGFyZ2V0LmRhdGFzZXQ7XHJcbiAgICAgICAgLyogbGV0IHVybCA9IGAuLi9xcmNvZGUvcXJjb2RlP2lkPSR7aWR9YDsgKi9cclxuICAgICAgICBsZXQgdXJsID0gXCIuLi9xcmNvZGUvcXJjb2RlP2lkPVwiICsgaWQ7XHJcbiAgICAgICAgd3gubmF2aWdhdGVUbyh7XHJcbiAgICAgICAgICAgIHVybFxyXG4gICAgICAgIH0pO1xyXG4gICAgfSxcclxuICAgIG9uTG9hZCgpIHtcclxuICAgICAgICB3eC5jbG91ZC5pbml0KCk7XHJcbiAgICB9LFxyXG4gICAgb25SZWFkeSgpIHtcclxuICAgICAgICB0aGlzLmdldEFsbEJvb2tzKClcclxuICAgICAgICB3eC5jbG91ZFxyXG4gICAgICAgICAgICAuY2FsbEZ1bmN0aW9uKHtcclxuICAgICAgICAgICAgICAgIG5hbWU6IFwidXBkYXRlQm9va0J5SWRcIlxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAudGhlbigocmVzOiBhbnkpID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKHJlcyk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgfSxcclxuICAgIC8vIOiOt+WPluS6keaVsOaNruW6k+eahOaJgOacieS5puexjVxyXG4gICAgZ2V0QWxsQm9va3MoKSB7XHJcbiAgICAgICAgd3guY2xvdWRcclxuICAgICAgICAgICAgLmNhbGxGdW5jdGlvbih7XHJcbiAgICAgICAgICAgICAgICBuYW1lOiBcImdldEJvb2tzXCJcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgLnRoZW4oKHJlczogYW55KSA9PiB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhyZXMpO1xyXG4gICAgICAgICAgICAgICAgbGV0IHJlc3VsdCA9IHJlcy5yZXN1bHQgfHwge307XHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHJlc3VsdCA9PSBcIm9iamVjdFwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHJkID0gcmVzdWx0LmRhdGEgfHwge307XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBkYXRhID0gcmQuZGF0YSB8fCB7fTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXREYXRhKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJvb2tzbGlzdDogZGF0YVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgfSxcclxuICAgIHVwZGF0ZUJvb2tCeUlkKGJpZDpzdHJpbmcpIHtcclxuICAgICAgICB3eC5jbG91ZFxyXG4gICAgICAgICAgICAuY2FsbEZ1bmN0aW9uKHtcclxuICAgICAgICAgICAgICAgIG5hbWU6IFwidXBkYXRlQm9va0J5SWRcIixcclxuICAgICAgICAgICAgICAgIGRhdGE6IHtcclxuICAgICAgICAgICAgICAgICAgICBiaWRcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSlcclxuICAgIH0sXHJcbiAgICBnZXRVc2VyQnlJZCgpIHtcclxuICAgICAgICBsZXQgdXNlciA9IHt9O1xyXG4gICAgICAgIHd4LmNsb3VkXHJcbiAgICAgICAgICAgIC5jYWxsRnVuY3Rpb24oe1xyXG4gICAgICAgICAgICAgICAgbmFtZTogXCJVc2VyQnlJZFwiLFxyXG4gICAgICAgICAgICB9KS50aGVuKChyZXM6IGFueSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ2dldCcpXHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhyZXMpO1xyXG4gICAgICAgICAgICAgICAgbGV0IHJlc3VsdCA9IHJlcy5yZXN1bHQgfHwge307XHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHJlc3VsdCA9PSBcIm9iamVjdFwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHJkID0gcmVzdWx0LmRhdGEgfHwge307XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBkYXRhID0gcmQuZGF0YSB8fCB7fTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdXNlciA9IGRhdGFbMF1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIGlmIChPYmplY3Qua2V5cyh1c2VyKS5sZW5ndGggPT0gMCkge1xyXG4gICAgICAgICAgICB0aGlzLmNyZWF0ZVVzZXIoKTtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgY3JlYXRlVXNlcigpIHtcclxuICAgICAgICB3eC5jbG91ZFxyXG4gICAgICAgICAgICAuY2FsbEZ1bmN0aW9uKHtcclxuICAgICAgICAgICAgICAgIG5hbWU6IFwiY3JlYXRlVXNlclwiLFxyXG4gICAgICAgICAgICB9KS50aGVuKHJlcz0+e1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ2NyZWF0ZScpXHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhyZXMpfSlcclxuICAgIH1cclxufSk7XHJcbiJdfQ==